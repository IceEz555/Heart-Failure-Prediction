import joblib
import pandas as pd
import streamlit as st

# ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏• Decision Tree
model_DecisionTree = joblib.load(r"C:\Users\LENOVO\Desktop\Project_Ai\DecisionTree_model.joblib")

# ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å
st.set_page_config(page_title="Heart Failure Prediction", page_icon="‚ù§Ô∏è")

# ‡∏™‡πÑ‡∏ï‡∏•‡πå Minimal (CSS)
st.markdown(
    """
    <style>
    body { background-color: #f8f9fa; color: #333333; font-family: Arial, sans-serif; }
    .stButton>button { width: 100%; border-radius: 8px; padding: 12px; font-size: 16px; background-color: #ff4b4b; color: white; }
    .stButton>button:hover { background-color: #ff3333; }
    .stTitle { text-align: center; }
    .stSidebar { background-color: #f1f1f1; padding: 20px; }
    .prediction-result { text-align: center; font-size: 18px; padding: 10px; border-radius: 8px; }
    </style>
    """,
    unsafe_allow_html=True,
)

# ‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠
st.title("‚ù§Ô∏è Heart Failure Prediction")

# ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
sex_list_selection = ["‡∏ä‡∏≤‡∏¢", "‡∏´‡∏ç‡∏¥‡∏á"]
ChestPainType_list_selection = ["TA: ‡πÄ‡∏à‡πá‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏≠‡∏Å‡πÅ‡∏ö‡∏ö‡πÇ‡∏£‡∏Ñ‡∏´‡∏•‡∏≠‡∏î‡πÄ‡∏•‡∏∑‡∏≠‡∏î‡∏´‡∏±‡∏ß‡πÉ‡∏à", "ATA: ‡πÄ‡∏à‡πá‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏≠‡∏Å‡πÅ‡∏ö‡∏ö‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥", "NAP: ‡πÄ‡∏à‡πá‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏≠‡∏Å‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡πÇ‡∏£‡∏Ñ‡∏´‡∏±‡∏ß‡πÉ‡∏à", "ASY: ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏≠‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏à‡πá‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏≠‡∏Å"]
FastingBS_list_selection = ["Yes", "No"]
RestingECG_list_selection = ["Normal", "ST: ‡∏Ñ‡∏•‡∏∑‡πà‡∏ô‡πÑ‡∏ü‡∏ü‡πâ‡∏≤‡∏´‡∏±‡∏ß‡πÉ‡∏à‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥", "LVH: ‡∏°‡∏µ‡∏†‡∏≤‡∏ß‡∏∞‡∏Å‡∏•‡πâ‡∏≤‡∏°‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏±‡∏ß‡πÉ‡∏à‡∏´‡∏ô‡∏≤‡∏ï‡∏±‡∏ß"]
ExerciseAngina_list_selection = ["Yes", "No"]
ST_Slope_list_selection = ["Up: ‡∏™‡∏π‡∏á‡∏Ç‡∏∂‡πâ‡∏ô", "Flat: ‡∏Ñ‡∏á‡∏ó‡∏µ‡πà", "Down: ‡∏•‡∏î‡∏•‡∏á"]

# ‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏õ‡πâ‡∏≠‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
with st.form("prediction_form"):
    st.markdown("### üîç Patient Information")
    
    col1, col2 = st.columns(2)
    with col1:
        age = st.slider("‡∏≠‡∏≤‡∏¢‡∏∏", 0, 100, 35)
        sex = st.radio("‡πÄ‡∏û‡∏®", sex_list_selection)
        ChestPainType = st.radio("‡∏≠‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏à‡πá‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏≠‡∏Å", ChestPainType_list_selection)
        FastingBS = st.selectbox("‡∏Ñ‡πà‡∏≤‡∏ô‡πâ‡∏≥‡∏ï‡∏≤‡∏•‡πÉ‡∏ô‡πÄ‡∏•‡∏∑‡∏≠‡∏î‡∏Ç‡∏ì‡∏∞‡∏≠‡∏î‡∏≠‡∏≤‡∏´‡∏≤‡∏£ (>120 mg/dl)", FastingBS_list_selection)
        RestingECG = st.radio("‡∏Ñ‡∏•‡∏∑‡πà‡∏ô‡πÑ‡∏ü‡∏ü‡πâ‡∏≤‡∏´‡∏±‡∏ß‡πÉ‡∏à‡∏Ç‡∏ì‡∏∞‡∏û‡∏±‡∏Å", RestingECG_list_selection)

    with col2:
        RestingBP = st.slider("‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏±‡∏ô‡πÇ‡∏•‡∏´‡∏¥‡∏ï‡∏Ç‡∏ì‡∏∞‡∏û‡∏±‡∏Å (mmHg)", 40, 200, 120)
        Cholesterol = st.slider("‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏≠‡πÄ‡∏•‡∏™‡πÄ‡∏ï‡∏≠‡∏£‡∏≠‡∏•‡πÉ‡∏ô‡πÄ‡∏•‡∏∑‡∏≠‡∏î (mg/dL)", 50, 400, 200)
        MaxHR = st.slider("‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡πâ‡∏ô‡∏Ç‡∏≠‡∏á‡∏´‡∏±‡∏ß‡πÉ‡∏à‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î (bpm)", 50, 250, 120)
        Oldpeak = st.slider("‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏†‡∏≤‡∏ß‡∏∞‡∏Ç‡∏≤‡∏î‡πÄ‡∏•‡∏∑‡∏≠‡∏î (‡∏Ñ‡πà‡∏≤ ST Depression)", 0.0, 6.0, 1.0, step=0.1)
        ST_Slope = st.selectbox("‡∏•‡∏±‡∏Å‡∏©‡∏ì‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏±‡∏ô‡∏Ç‡∏≠‡∏á ST segment", ST_Slope_list_selection)
    
    ExerciseAngina = st.selectbox("‡∏≠‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏à‡πá‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏≠‡∏Å‡∏Ç‡∏ì‡∏∞‡∏≠‡∏≠‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏¢", ExerciseAngina_list_selection)

    # ‡∏õ‡∏∏‡πà‡∏°‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå
    submit_button = st.form_submit_button("üîç Predict")

# ‡πÅ‡∏õ‡∏•‡∏á‡∏Ñ‡πà‡∏≤‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç
convert_sex = {"‡∏ä‡∏≤‡∏¢": 1, "‡∏´‡∏ç‡∏¥‡∏á": 0}
convert_ChestPainType = {"TA: ‡πÄ‡∏à‡πá‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏≠‡∏Å‡πÅ‡∏ö‡∏ö‡πÇ‡∏£‡∏Ñ‡∏´‡∏•‡∏≠‡∏î‡πÄ‡∏•‡∏∑‡∏≠‡∏î‡∏´‡∏±‡∏ß‡πÉ‡∏à": 3, "ATA: ‡πÄ‡∏à‡πá‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏≠‡∏Å‡πÅ‡∏ö‡∏ö‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥": 1, "NAP: ‡πÄ‡∏à‡πá‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏≠‡∏Å‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡πÇ‡∏£‡∏Ñ‡∏´‡∏±‡∏ß‡πÉ‡∏à": 2, "ASY: ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏≠‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏à‡πá‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏≠‡∏Å": 0}
convert_FastingBS = {"Yes": 1, "No": 0}
convert_RestingECG = {"Normal": 1, "ST: ‡∏Ñ‡∏•‡∏∑‡πà‡∏ô‡πÑ‡∏ü‡∏ü‡πâ‡∏≤‡∏´‡∏±‡∏ß‡πÉ‡∏à‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥": 2, "LVH: ‡∏°‡∏µ‡∏†‡∏≤‡∏ß‡∏∞‡∏Å‡∏•‡πâ‡∏≤‡∏°‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏±‡∏ß‡πÉ‡∏à‡∏´‡∏ô‡∏≤‡∏ï‡∏±‡∏ß": 0}
convert_ExerciseAngina = {"Yes": 1, "No": 0}
convert_ST_Slope = {"Up: ‡∏™‡∏π‡∏á‡∏Ç‡∏∂‡πâ‡∏ô": 2, "Flat: ‡∏Ñ‡∏á‡∏ó‡∏µ‡πà": 1, "Down: ‡∏•‡∏î‡∏•‡∏á": 0}

if submit_button:
    try:
        df = pd.DataFrame(
            {
                "Age": [age],
                "Sex": [convert_sex[sex]],
                "ChestPainType": [convert_ChestPainType[ChestPainType]],
                "RestingBP": [RestingBP],
                "Cholesterol": [Cholesterol],
                "FastingBS": [convert_FastingBS[FastingBS]],
                "RestingECG": [convert_RestingECG[RestingECG]],
                "MaxHR": [MaxHR],
                "ExerciseAngina": [convert_ExerciseAngina[ExerciseAngina]],
                "Oldpeak": [Oldpeak],
                "ST_Slope": [convert_ST_Slope[ST_Slope]],
            },
            index=[0],
        )

        # ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå
        prediction = model_DecisionTree.predict(df)[0]

        # ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
        st.markdown("### üìù Prediction Result")
        if prediction == 1:
            st.markdown('<div class="prediction-result" style="background-color: #ffdddd; color: red;">‚ö†Ô∏è High Risk of Heart Disease</div>', unsafe_allow_html=True)
        else:
            st.markdown('<div class="prediction-result" style="background-color: #d4edda; color: green;">‚úÖ Low Risk of Heart Disease</div>', unsafe_allow_html=True)

    except ValueError:
        st.error("‚ö†Ô∏è Please ensure all fields are correctly filled!")
